import os
import requests
import time

from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackQueryHandler, CallbackContext,
                          CommandHandler, ConversationHandler,
                          MessageHandler, Updater, Filters)
from telegram import ParseMode
from dotenv import load_dotenv
from pprint import pprint
from textwrap import dedent
from more_itertools import chunked


load_dotenv()
tg_bot_token = os.getenv("TG_BOT_TOKEN")
bot = Bot(token=tg_bot_token)
updater = Updater(token=tg_bot_token)
dispatcher = updater.dispatcher


def start(update, context):
    context.bot.send_message(update.effective_chat.id, text='–ü—Ä–∏–≤–µ—Ç —Ö–æ—á–µ—à—å –±—É–∫–µ—Ç')
    time.sleep(3)
    return choise(update, context)


def choise(update, context):
    url = f"http://127.0.0.1:8000/categories/send/"
    response = requests.get(url)
    print(response)
    categories = response.json()['categories']
    categories.extend(["–ù–µ –≤–∞–∂–Ω–æ", "–°–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"])
    message_keyboard = list(chunked(categories, 2))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = '–ü–æ—Ä–∞ –±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä'
    update.message.reply_text(text=menu_msg, reply_markup=markup)






def get_bunch(update, context):
    url = f"http://127.0.0.1:8000/bunch/send/"
    payload = {
        "category": '–±–æ–ª–µ–µ 2000—Ä',
        "reason": '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
    }
    response = requests.post(url, data=payload)

    if response.ok:
        bunches = response.json()
        bunch = bunches['bunch'][0]

        menu_msg = dedent(f"""\
            <b>{bunch.get('name')}</b>
            <b>–¶–µ–Ω–∞ {bunch.get('price')} —Ä—É–±</b>

            <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>
            {bunch.get('description')}
            <b>–°–æ—Å—Ç–∞–≤:</b>
            {bunch.get('composition')}
            """).replace("    ", "")

        message_keyboard = [
            [
                "–§–ª–æ—Ä–∏—Å—Ç",
                "–ó–∞–∫–∞–∑"
            ]
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        bunch_img = requests.get(bunch['image'])
        update.message.reply_photo(
            bunch_img.content,
            caption=menu_msg,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        )
    else:
        update.message.reply_text('–¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç üò•')


def get_no(update, context):
    update.message.reply_text('–ù—É –∏ –¥—É—Ä–∞')


def choise2(update, context):
    keyboard = [
        [InlineKeyboardButton('–ü–æ–∑–≤–æ–Ω–∏—Ç—å', callback_data='1'), InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å', callback_data='2')],
    ]
    update.message.reply_text('–î–∞–π –æ—Ç–≤–µ—Ç', reply_markup=InlineKeyboardMarkup(keyboard))


def button(update, context):
    q = update.callback_query
    q.answer()
    if q.data == '1':
        context.bot.send_message(update.effective_chat.id, '–ß–µ –∑–≤–æ–Ω–∏—Ç—å –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–Ω—è—Ç—ã')
    elif q.data == '2':
        context.bot.send_message(update.effective_chat.id, '–ü–∏—à–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–º')

start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

get_bunch_handler = MessageHandler(Filters.text("‚úÖ –î–∞"), get_bunch)
dispatcher.add_handler(get_bunch_handler)

get_no_handler = MessageHandler(Filters.text("‚ùå –ù–µ—Ç"), get_no)
dispatcher.add_handler(get_no_handler)

florist_handler = MessageHandler(Filters.text("–§–ª–æ—Ä–∏—Å—Ç"), choise2)
dispatcher.add_handler(florist_handler)

button_handler = CallbackQueryHandler(button)
dispatcher.add_handler(button_handler)

updater.start_polling()
updater.idle()
