import os
import requests

from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot,
                      ReplyKeyboardMarkup, KeyboardButton)
from telegram.ext import (CallbackQueryHandler, CallbackContext,
                          CommandHandler, ConversationHandler,
                          MessageHandler, Updater, Filters)
from telegram import ParseMode
from dotenv import load_dotenv
from pprint import pprint
from textwrap import dedent
from more_itertools import chunked
from enum import Enum, auto


class States(Enum):
    CHOISE_REASON = auto()
    CHOISE_CATEGORY = auto()
    CHOISE_PEOPLE = auto()


def start(update, context):
    url = f"http://127.0.0.1:8000/reasons/send/"
    response = requests.get(url)
    categories = response.json()['reasons']
    categories.extend(["–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"])
    message_keyboard = list(chunked(categories, 2))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = '–ü—Ä–∏–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –±—É–∫–µ—Ç–∞'
    update.message.reply_text(text=menu_msg, reply_markup=markup)
    return States.CHOISE_REASON


def another_reason(update, context):
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É')


def choise_category(update, context):
    url = f"http://127.0.0.1:8000/categories/send/"
    response = requests.get(url)
    categories = response.json()['categories']
    categories.extend(["–ù–µ –≤–∞–∂–Ω–æ"])
    message_keyboard = list(chunked(categories, 2))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    update.message.reply_text(text=menu_msg, reply_markup=markup)
    context.user_data['reason'] = update.message.text
    return States.CHOISE_CATEGORY


def get_bunch(update, context):
    context.user_data['category'] = update.message.text
    url = f"http://127.0.0.1:8000/bunch/send/"
    payload = {
        "category": context.user_data['category'],
        "reason": context.user_data['reason'],
    }
    response = requests.post(url, data=payload)

    if response.ok:
        bunches = response.json()
        pprint(bunches)
        bunch = bunches['bunch'][0]

        menu_msg = dedent(f"""\
            <b>{bunch.get('name')}</b>
            <b>–¶–µ–Ω–∞ {bunch.get('price')} —Ä—É–±</b>

            <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>
            {bunch.get('description')}
            <b>–°–æ—Å—Ç–∞–≤:</b>
            {bunch.get('composition')}
            """).replace("    ", "")

        message_keyboard = [
            [
                "–§–ª–æ—Ä–∏—Å—Ç",
                "–ó–∞–∫–∞–∑"
            ]
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        bunch_img = requests.get(bunch['image'])
        update.message.reply_photo(
            bunch_img.content,
            caption=menu_msg,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        )
    else:
        update.message.reply_text('–¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç üò•')

    return States.CHOISE_PEOPLE


def florist(update, context):
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É')


if __name__ == '__main__':
    load_dotenv()
    tg_bot_token = os.getenv("TG_BOT_TOKEN")
    bot = Bot(token=tg_bot_token)
    updater = Updater(token=tg_bot_token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.CHOISE_REASON: [
                MessageHandler(
                    Filters.text("–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"), another_reason
                ),
                MessageHandler(
                    Filters.text, choise_category
                ),
            ],
            States.CHOISE_CATEGORY: [
                MessageHandler(
                    Filters.text, get_bunch
                )
            ],
            States.CHOISE_PEOPLE: [
                MessageHandler(
                    Filters.text("–§–ª–æ—Ä–∏—Å—Ç"), florist
                )
            ],
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation',
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
